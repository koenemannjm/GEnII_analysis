//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//
//   Created by Jacob Koenemann & ChatGPT
//   contact: bxy3zr@virginia.edu
//                                                                     
//   Last Modified April 6, 2025   
//
//      
//   The purpose of this script is to test out how         
//   to compute dx and dy and how to structure the 
//   a header file that I will use in the future.
//                                                    
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////  
#include "TFile.h"
#include "TTree.h"
#include "TVector3.h"
#include "TMath.h"
#include "TH1D.h"
#include "TH2D.h"
#include "TCanvas.h"

#include <iostream>

void compute_dx_dy(std::string config, std::string target, std::string pass){
    // Validate config
    std::vector<std::string> valid_configs = {"kin2", "kin3", "kin4a", "kin4b"};
    if (std::find(valid_configs.begin(), valid_configs.end(), config) == valid_configs.end()) {
        std::cerr << "Error: Invalid configuration '" << config << "'.\n";
        std::cerr << "Allowed configurations are: kin2, kin3, kin4a, kin4b.\n";
        return;
    }

    // Validate target
    std::vector<std::string> valid_targets = {"He3", "H"};
    if (std::find(valid_targets.begin(), valid_targets.end(), target) == valid_targets.end()) {
        std::cerr << "Error: Invalid target '" << target << "'.\n";
        std::cerr << "Allowed configurations are: He3, H.\n";
        return;
    }

    // Validate target
    std::vector<std::string> valid_passes = {"pass1", "pass2"};
    if (std::find(valid_passes.begin(), valid_passes.end(), pass) == valid_passes.end()) {
        std::cerr << "Error: Invalid target '" << pass << "'.\n";
        std::cerr << "Allowed configurations are: pass1, pass2.\n";
        return;
    }

    // Set experiment name
    std::string exp_name;
    if (config == "kin2") {
        exp_name = "GEN2";
    }
    else if (config == "kin3") {
         exp_name = "GEN3";
    }
    else if (config == "kin4a") {
         exp_name = "GEN4";
    }
    else if (config == "kin4b") {
         exp_name = "GEN4b";
    }
    
    std::string dir_path = "../../../data/raw/" + pass + "/"  + config + "_" + target + "/";
    std::string file_name = "QE_data_" + exp_name + "_sbs100p_nucleon_np" + ".root";
    std::string file_path = dir_path + file_name;

    // Open ROOT file
    TFile* file = TFile::Open(file_path.c_str());
    if (!file || file->IsZombie()) {
        std::cerr << "Error opening file!" << std::endl;
	return;
    }

    // Get tree "Tout"
    TTree* tree = (TTree*)file->Get("Tout");
    if (!tree) {
        std::cerr << "Tree 'Tout' not found!" << std::endl;
	return;
    }

    // Declare variables for branches
    
    // BigBite variables
    double keprime_x, keprime_y, keprime_z;

    tree->SetBranchAddress("bb.tr.px", &keprime_x);
    tree->SetBranchAddress("bb.tr.py", &keprime_y);
    tree->SetBranchAddress("bb.tr.pz", &keprime_z);

    // Hcal variables
    double Hcalx, Hcaly;

    tree->SetBranchAddress("sbs.hcal.x", &Hcalx);
    tree->SetBranchAddress("sbs.hcal.y", &Hcaly);

    // Pre-Defining Histograms for Calculations results
    TH1D* h_keprime_mag = new TH1D("h_keprime_mag", "Track Momentum p;p;Counts", 100, 0.5, 3.5);
    TH1D* h_etheta = new TH1D("h_etheta", "etheta ;etheta;Counts", 100, 0.4, 0.7);
    TH1D* h_ephi = new TH1D("h_ephi", "ephi;ephi;Counts", 100, -0.6, 0.6);
    TH2D* h_mag_etheta = new TH2D("h_mag_etheta", "p vs etheta;etheta,p", 100, 0.4, 0.7, 100, 0.5, 3.5);
    

    //Loop over entries of the tree
    Long64_t Nentries = tree->GetEntries();
    int last_percent = -1;
    for (Long64_t i = 0; i < Nentries; ++i) {
      tree->GetEntry(i);

      // Defining momentum 3-vector
      TVector3 keprime_vec(keprime_x,keprime_y,keprime_z);

      double keprime_mag = keprime_vec.Mag();
      double etheta = keprime_vec.Theta();
      double ephi = keprime_vec.Phi();

      h_keprime_mag->Fill(keprime_mag);
      h_etheta->Fill(etheta);
      h_ephi->Fill(ephi);
      h_mag_etheta->Fill(etheta,keprime_mag);

      int percent = static_cast<int>(100.0 * i / Nentries);
      if (percent != last_percent) {
	  std::cout << "\rProcessing: " << percent << "% completed" << std::flush;
	  last_percent = percent;
      }
    }
    std::cout << "\rProcessing: 100% completed" << std::endl;

    // Draw Histograms
    TCanvas* c1 = new TCanvas("c1", "Track Information", 1200, 400);
    c1->Divide(3,1);
    c1->cd(1); h_keprime_mag->Draw();
    c1->cd(2); h_etheta->Draw();
    c1->cd(3); h_ephi->Draw();

    TCanvas* c2 = new TCanvas("c2", "track p vs etheta", 600, 500);
    h_mag_etheta->Draw("COLZ");
}
